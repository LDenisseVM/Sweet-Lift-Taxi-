# # Descripción del proyecto
# 
# La compañía Sweet Lift Taxi ha recopilado datos históricos sobre pedidos de taxis en los aeropuertos. Para atraer a más conductores durante las horas pico, necesitamos predecir la cantidad de pedidos de taxis para la próxima hora. Construiremos un modelo para dicha predicción.
# 
# La métrica RECM en el conjunto de prueba no debe ser superior a 48.
# 
# ## Pasos a seguir:
# 
# 1. Descargamos los datos y hacemos el remuestreo por una hora.
# 2. Analizamos los datos
# 3. Entrenamos diferentes modelos con diferentes hiperparámetros. La muestra de prueba debe ser el 10% del conjunto de datos inicial.
# 4. Probamos los datos usando la muestra de prueba.
# 
# ## Descripción de los datos
# 
# Los datos se almacenan en el archivo `taxi.csv`. 	
# El número de pedidos está en la columna `num_orders`.


# ## Preparación


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor


data= pd.read_csv('/datasets/taxi.csv', parse_dates=[0], index_col=[0])


data.head(10)

data.info()

data.describe()


# Haremos el remuestreo por hora:

data=data.resample('1H').sum()
data


# ## Análisis

data.plot()

# Vemos que hay mas pedidos de taxis en verano, sin embargo lo que nos interesan son las horas pico de un día, asi que graficaremos un segmento más pequeño, de un día

data['2018-03-01'].plot()


# Vemos que el número más grande de pedidos es alrededor de la media noche, mientras que cuando hay menos demanda es alrededor de las 6:00 am 

# Ahora analicemos una semana y un mes distintos

data['2018-03-01': '2018-03-07'].plot()

data['2018-04-01': '2018-04-07'].plot()


# Vemos que hay mayor demanda los lunes y sabados en promedio

data['2018-03'].plot()

data['2018-04'].plot()


# Vemos que alrededor del día 23 de cada mes hay una mayor demanda en los pedidos de taxi

# Crearemos un modelo basado en el mes, dia y hora 


# ## Formación

data['month'] = data.index.month
data['day'] = data.index.day
data['dayofweek'] = data.index.dayofweek
data['hour']= data.index.hour


train, test= train_test_split(data, test_size=.1, shuffle= False)


features_train=train.drop(['num_orders'], axis=1)
target_train= train['num_orders']
features_test=test.drop(['num_orders'], axis=1)
target_test= test['num_orders']


# ## Prueba


model_rf= RandomForestRegressor(n_estimators= 100, max_depth=10)
model_rf.fit(features_train, target_train)
predictions_rf= model_rf.predict(features_test)
RECM= mean_squared_error(target_test, predictions_rf, squared=False)
RECM


model_dt= DecisionTreeRegressor(max_depth=500)
model_dt.fit(features_train, target_train)
predictions_dt= model_dt.predict(features_test)
RECM= mean_squared_error(target_test, predictions_dt, squared=False)
RECM


model_lr= LinearRegression()
model_lr.fit(features_train, target_train)
predictions_lr= model_lr.predict(features_test)
RECM= mean_squared_error(target_test, predictions_lr, squared=False)
RECM



# Vemos que con las caracteristicas que creamos logramos que el RECM del modelo sea menor a 48 (Bosque aleatorio y árbol de decisión)
